#BlueJ class context
comment0.target=Pawn
comment0.text=\n\ Write\ a\ description\ of\ class\ Pawn\ here.\n\n\ @author\ (K.L\ B.B)\n\ @version\ (05.05.2020)\n
comment1.params=white\ black\ captured
comment1.target=Pawn(boolean,\ boolean,\ boolean)
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ Pawn\n
comment2.params=
comment2.target=boolean\ isWhite()
comment2.text=\n\ The\ isWhite\ method,\ checking\ if\ the\ pawn\ has\ the\ white\ color\n\ \ \ \ \ \n\ \ \ \ \n
comment3.params=white
comment3.target=void\ setWhite(boolean)
comment3.text=\n\ Like\ in\ the\ first\ class,\ we\ are\ going\ to\ again\ use\ a\ method\ set+\ name\n\ of\ instance\ variable\ that\ we\ do\ not\ plan\ it\ to\ return\ anything.\n
comment4.params=
comment4.target=boolean\ isBlack()
comment4.text=\n\ The\ isBlack\ method,\ checking\ if\ any\ pawn\ has\ the\ black\ colour.\n
comment5.params=black
comment5.target=void\ setBlack(boolean)
comment5.text=\n\ Another\ method\ setBlack,\ which\ also\ does\ not\ return\ anything\ \n
comment6.params=
comment6.target=boolean\ isCaptured()
comment6.text=\n\ check\ whether\ some\ specific\ pawn\ is\ captured,\ and\ act\ accordingly\ aka\ return\ ture\n
comment7.params=captured
comment7.target=void\ setCaptured(boolean)
comment7.text=\n\ Now\ with\ the\ set\ method,\ which\ we\ do\ not\ expect\ it\ to\ return\ anything.\n\ \n
comment8.params=rectangle\ start\ end
comment8.target=boolean\ pawnMove(Rectangle,\ Rectangle,\ Rectangle)
comment8.text=\n\ Lastly\ we\ need\ to\ implement\ one\ method\ that\ is\ going\ to\ check\n\ whether\ any\ of\ the\ pawns\ are\ able\ to\ change\ position\ in\ some\ \n\ direction,\ dependent\ of\ the\ type\ of\ the\ pawn.\n
numComments=9
